import streamlit as st
import pandas as pd
import psycopg2

# Function to connect to PostgreSQL
def get_pg_connection():
    return psycopg2.connect(
        host="your_host",
        database="your_db",
        user="your_user",
        password="your_password"
    )

# Function to query t_raw_order
def query_raw_order(order_number):
    conn = get_pg_connection()
    query = f"SELECT * FROM t_raw_order WHERE work_order_number = '{order_number}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Function to query t_master_order
def query_master_order(order_number):
    conn = get_pg_connection()
    query = f"SELECT * FROM t_master_order WHERE order_number = '{order_number}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Function to query t_transaction_manager
def query_transaction_manager(order_number):
    conn = get_pg_connection()
    query = f"SELECT * FROM t_transaction_manager WHERE order_number = '{order_number}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Function to display DataFrame as compact HTML table in Streamlit
def display_html_table(df, title):
    st.markdown(f"### {title}")

    if df.empty:
        st.markdown(f"**No data found for {title}**")
    else:
        # Define compact CSS styles
        compact_css = """
        <style>
        table {
            border-collapse: collapse;
            width: 100%;
            font-size: 12px;
        }
        th, td {
            padding: 4px;
            text-align: left;
            border: 1px solid #dddddd;
        }
        th {
            background-color: #f2f2f2;
        }
        </style>
        """

        # Convert DataFrame to an HTML table and apply compact CSS
        st.markdown(compact_css + df.to_html(index=False, justify='left', border=1), unsafe_allow_html=True)

# Streamlit app logic
st.title("Order Number Ticket Analyzer")

order_number = st.text_input("Enter Order Number")
submit_button = st.button("Submit")

# When the submit button is clicked
if submit_button:
    if order_number:
        # Step 1: Query and display t_raw_order
        st.write(f"Querying t_raw_order for order: {order_number}...")
        raw_order_df = query_raw_order(order_number)
        display_html_table(raw_order_df, "t_raw_order")

        # Step 2: Query and display t_master_order
        st.write(f"Querying t_master_order for order: {order_number}...")
        master_order_df = query_master_order(order_number)
        display_html_table(master_order_df, "t_master_order")

        # Step 3: Query and display t_transaction_manager
        st.write(f"Querying t_transaction_manager for order: {order_number}...")
        transaction_manager_df = query_transaction_manager(order_number)
        display_html_table(transaction_manager_df, "t_transaction_manager")

    else:
        st.error("Please enter a valid Order Number.")
